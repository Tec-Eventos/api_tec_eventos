const{create:create,getSchoolById:getSchoolById,getSchools:getSchools,updateSchool:updateSchool,deleteSchool:deleteSchool,getSchoolByCdEscolar:getSchoolByCdEscolar,getAllEventsSchoolDo:getAllEventsSchoolDo}=require("../services/schoolServices"),{genSaltSync:genSaltSync,hashSync:hashSync,compareSync:compareSync}=require("bcrypt"),{sign:sign}=require("jsonwebtoken"),{log:log}=require("npmlog"),MAX_ATTEMPTS=5,loginAttempts={};module.exports={createSchool:(s,e)=>{const o=s.body,t=genSaltSync(10);o.senha=hashSync(o.senha,t),create(o,((s,o)=>s?(console.log(s),e.status(500).json({success:0,message:"Database connection error"})):e.status(201).json({success:1,data:o})))},getSchoolById:(s,e)=>{const o=s.params.cdEscolar;getSchoolById(o,((s,o)=>{if(!s)return o?e.status(200).json({success:1,data:o}):e.status(400).json({success:0,message:"Record not found"});console.log(s)}))},getAllEventsSchoolDo:(s,e)=>{const o=s.params.cdEscolar;getAllEventsSchoolDo(o,((s,o)=>{if(!s)return o?e.json({success:1,data:o}):e.json({success:0,message:"Record not found"});console.log(s)}))},getSchools:(s,e)=>{getSchools(((s,o)=>{if(!s)return e.status(200).json({success:1,data:o});console.log(s)}))},updateSchool:(s,e)=>{const{cdEscolar:o}=s.params,t=s.body,c=genSaltSync(10);t.senha=hashSync(t.senha,c),t.cdEscolar=o,updateSchool(t,((s,o)=>{if(!s)return o?e.status(200).json({success:1,message:"School update succesfully"}):e.status(400).json({success:0,message:"Failed to update"});console.log(s)}))},deleteSchool:(s,e)=>{s.body;const{cdEscolar:o}=s.params;deleteSchool({cdEscolar:o},((s,o)=>{if(!s)return o&&0!==o.affectedRows?e.status(200).json({success:1,message:"User deleted successfully"}):e.status(400).json({success:0,message:"Record not found"});console.log(s)}))},login:(s,e)=>{const o=s.body,t=o.email,c=o.cd_escolar;return t&&o.senha&&c?loginAttempts[t]&&loginAttempts[t]>=5?(console.log(`Login attempt for email ${t}. Result: Too many attempts.`),e.status(429).json({success:0,message:"Too many failed attempts. Please try again later."})):void getSchoolByCdEscolar(c,((s,a)=>{if(s)return console.log(s),e.status(500).json({success:0,message:"Database error"});if(t===a.email&&o.nome===a.nome&&c===a.cd_escolar){loginAttempts[t]=0,a.senha=void 0;const s=sign({result:a},process.env.MYSECRET,{expiresIn:"1h"});return console.log(`Login attempt for email ${t}. Result: Success using name and email.`),e.status(201).json({success:1,message:"Login successfully",token:s})}return loginAttempts[t]=(loginAttempts[t]||0)+1,console.log(`Login attempt for email ${t}. Result: Invalid credentials.`),e.status(400).json({success:0,data:"Invalid name or email"})})):e.status(400).json({success:0,message:"Email and password are required"})}};