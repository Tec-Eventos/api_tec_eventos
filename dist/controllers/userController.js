const{create:create,getUserById:getUserById,getUsers:getUsers,updateUser:updateUser,deleteUser:deleteUser,getUserByRM:getUserByRM,getAllEventsUser:getAllEventsUser}=require("../services/userServices"),{genSaltSync:genSaltSync,hashSync:hashSync,compareSync:compareSync}=require("bcrypt"),{sign:sign}=require("jsonwebtoken"),MAX_ATTEMPTS=5,loginAttempts={};module.exports={createUser:(e,s)=>{const t=e.body,n=genSaltSync(10);t.senha=hashSync(t.senha,n),create(t,((e,t)=>e?(console.log(e),s.status(500).json({success:0,message:"Database connection error"})):s.status(200).json({success:1,data:t})))},getUserById:(e,s)=>{const t=e.params.rm_aluno;getUserById(t,((e,t)=>{if(!e)return t?s.json({success:1,data:t}):s.json({success:0,message:"Record not found"});console.log(e)}))},getUsers:(e,s)=>{getUsers(((e,t)=>{if(!e)return s.json({success:1,data:t});console.log(e)}))},getAllEventsUser:(e,s)=>{const t=e.params.rm_aluno;getAllEventsUser(t,((e,t)=>{if(!e)return t?s.json({success:1,data:t}):s.json({success:0,message:"Record not found"});console.log(e)}))},updateUser:(e,s)=>{const{rm_aluno:t}=e.params,n=e.body,o=genSaltSync(10);n.senha=hashSync(n.senha,o),n.rm_aluno=t,updateUser(n,((e,t)=>{if(!e)return t?s.json({success:1,message:"Updated successfully"}):s.json({success:0,message:"Failed to update user"});console.log(e)}))},deleteUser:(e,s)=>{e.body;const{rm_aluno:t}=e.params;deleteUser({rm_aluno:t},((e,t)=>{if(!e)return t&&0!==t.affectedRows?s.json({success:1,message:"User deleted successfully"}):s.json({success:0,message:"Record not found"});console.log(e)}))},login:(e,s)=>{const t=e.body,n=t.email,o=t.rm_aluno;return n&&t.senha&&o?loginAttempts[n]&&loginAttempts[n]>=5?(console.log(`Login attempt for email ${n}. Result: Too many attempts.`),s.status(429).json({success:0,message:"Too many failed attempts. Please try again later."})):void getUserByRM(o,((e,a)=>{if(e)return console.log(e),s.status(500).json({success:0,message:"Database error"});if(n===a.email&&t.nome===a.nome&&o===a.rm_aluno){loginAttempts[n]=0,a.senha=void 0;const e=sign({result:a},process.env.MYSECRET,{expiresIn:"1h"});return console.log(`Login attempt for email ${n}. Result: Success using name and email.`),s.json({success:1,message:"Login successfully",token:e})}return loginAttempts[n]=(loginAttempts[n]||0)+1,console.log(`Login attempt for email ${n}. Result: Invalid credentials.`),s.json({success:0,data:"Invalid name or email"})})):s.status(400).json({success:0,message:"Email and password are required"})}};